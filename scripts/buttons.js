// Generated by CoffeeScript 1.7.1
(function() {
  var relMouseCoordsWithin,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  relMouseCoordsWithin = function(event, canvas, x, y, width, height) {
    var canvasX, canvasY, currentElement, totalOffsetX, totalOffsetY;
    totalOffsetX = 0;
    totalOffsetY = 0;
    canvasX = 0;
    canvasY = 0;
    currentElement = canvas;
    totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
    totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    while (currentElement = currentElement.offsetParent) {
      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;
    if (x <= canvasX && canvasX <= x + width) {
      if (y <= canvasY && canvasY <= y + height) {
        return true;
      }
    }
    return false;
  };

  window.CanvasButton = (function() {
    function CanvasButton(canvas, context, scaling, inactiveImg, activeImg, x, y, onEvent, offEvent) {
      var self;
      this.canvas = canvas;
      this.context = context;
      this.scaling = scaling;
      this.inactiveImg = inactiveImg;
      this.activeImg = activeImg;
      this.x = x;
      this.y = y;
      this.onEvent = onEvent;
      this.offEvent = offEvent;
      this.currentImage = inactiveImg;
      this.width = inactiveImg.width * scaling;
      this.height = inactiveImg.height * scaling;
      this.trueX = x * scaling;
      this.trueY = y * scaling;
      self = this;
      this.mouseDownEvent = function(ev) {
        if (relMouseCoordsWithin(ev, self.canvas, self.trueX, self.trueY, self.width, self.height)) {
          return self.clicked();
        }
      };
      this.mouseUpEvent = function(ev) {
        if (relMouseCoordsWithin(ev, self.canvas, self.trueX, self.trueY, self.width, self.height)) {
          return self.released();
        }
      };
      this.canvas.addEventListener('mousedown', this.mouseDownEvent, false);
      this.canvas.addEventListener('mouseup', this.mouseUpEvent, false);
    }

    CanvasButton.prototype.clicked = function() {};

    CanvasButton.prototype.released = function() {};

    CanvasButton.prototype.draw = function() {
      return this.context.drawImage(this.currentImage, this.x, this.y);
    };

    return CanvasButton;

  })();

  window.ToggleButton = (function(_super) {
    __extends(ToggleButton, _super);

    function ToggleButton(canvas, context, scaling, inactiveImg, activeImg, x, y, onEvent, offEvent) {
      this.canvas = canvas;
      this.context = context;
      this.scaling = scaling;
      this.inactiveImg = inactiveImg;
      this.activeImg = activeImg;
      this.x = x;
      this.y = y;
      this.onEvent = onEvent;
      this.offEvent = offEvent;
      ToggleButton.__super__.constructor.call(this, this.canvas, this.context, this.scaling, inactiveImg, activeImg, this.x, this.y, onEvent, offEvent);
      this.isToggled = false;
    }

    ToggleButton.prototype.clicked = function() {
      this.isToggled = !this.isToggled;
      this.currentImage = this.isToggled ? this.activeImg : this.inactiveImg;
      if (this.isToggled) {
        return this.onEvent();
      } else {
        return this.offEvent();
      }
    };

    return ToggleButton;

  })(CanvasButton);

  window.ClickButton = (function(_super) {
    __extends(ClickButton, _super);

    function ClickButton() {
      return ClickButton.__super__.constructor.apply(this, arguments);
    }

    ClickButton.prototype.clicked = function() {
      this.onEvent();
      this.currentImage = this.activeImg;
      return this.draw();
    };

    ClickButton.prototype.released = function() {
      this.offEvent();
      this.currentImage = this.inactiveImg;
      return this.draw();
    };

    return ClickButton;

  })(CanvasButton);

}).call(this);

//# sourceMappingURL=buttons.map
